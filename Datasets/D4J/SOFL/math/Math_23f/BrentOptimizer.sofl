module BrentOptimizer
type
  
var
  GOLDEN_SECTION: real = 0.5 * (3 - sqrt(5))  // ≈0.38197
  MIN_RELATIVE_TOLERANCE: real = 2 * ulp(1.0) // ≈4.440892098500626E-16

process BrentOptimizer(
  rel: real,
  abs: real,
  checker: ConvergenceChecker<UnivariatePointValuePair>
) result: BrentOptimizer
pre 
  rel ≥ MIN_RELATIVE_TOLERANCE ∧ 
  abs > 0
post 
  result.relativeThreshold = rel ∧
  result.absoluteThreshold = abs ∧
  super(checker)  // Initialize superclass
Functional Scenario Form 
validTolerances&&optimizerCreated || 
relTooSmall&&exceptionThrown || 
absNotPositive&&exceptionThrown
end_process

process BrentOptimizer(rel: real, abs: real) result: BrentOptimizer
pre 
  rel ≥ MIN_RELATIVE_TOLERANCE ∧ 
  abs > 0
post 
  result = BrentOptimizer(rel, abs, null)  // Calls 3-arg constructor
Functional Scenario Form 
validTolerances&&optimizerCreated || 
relTooSmall&&exceptionThrown || 
absNotPositive&&exceptionThrown
end_process

process doOptimize() result: UnivariatePointValuePair
pre 
  this.relativeThreshold ≥ MIN_RELATIVE_TOLERANCE ∧ 
  this.absoluteThreshold > 0
post

  isMinim = (getGoalType() = GoalType.MINIMIZE) ∧
  lo = getMin() ∧ mid = getStartValue() ∧ hi = getMax() ∧
  a = min(lo, hi) ∧ b = max(lo, hi) ∧
  x = mid ∧ v = x ∧ w = x ∧ d = 0 ∧ e = 0 ∧
  fx = computeObjectiveValue(x) ∧
  (¬isMinim ⇒ fx = -fx) ∧
  fv = fx ∧ fw = fx ∧
  current = new UnivariatePointValuePair(x, isMinim ? fx : -fx) ∧
  best = current ∧
  iter = 0 ∧
  

  while true •
      m = 0.5 * (a + b) ∧
      tol1 = relativeThreshold * |x| + absoluteThreshold ∧
      tol2 = 2 * tol1 ∧
      stop = (|x - m| ≤ tol2 - 0.5 * (b - a)) ∧
      (stop ⇒ break) ∧
      

      (|e| > tol1 ⇒ 
          r = (x - w) * (fx - fv) ∧
          q = (x - v) * (fx - fw) ∧
          p = (x - v) * q - (x - w) * r ∧
          q = 2 * (q - r) ∧
          (q > 0 ⇒ p = -p ∧ q = -q) ∧            r = e ∧ e = d ∧
                  (p > q*(a-x) ∧ p < q*(b-x) ∧ |p| < |0.5*q*r| ⇒ 
              d = p/q ∧ u = x + d ∧
              (|u - a| < tol2 ∨ |b - u| < tol2 ⇒ 
                  (x ≤ m ⇒ d = tol1) ∧ (x > m ⇒ d = -tol1) ∧
                  u = x + d
              )
          ) ∨ (¬(p > q*(a-x) ∧ p < q*(b-x) ∧ |p| < |0.5*q*r|) ⇒ 
              (x < m ⇒ e = b - x) ∧ (x ≥ m ⇒ e = a - x) ∧
              d = GOLDEN_SECTION * e
          )
      ) ∨ (|e| ≤ tol1 ⇒ 
          (x < m ⇒ e = b - x) ∧ (x ≥ m ⇒ e = a - x) ∧
          d = GOLDEN_SECTION * e
      ) ∧
      
          (|d| < tol1 ⇒ 
          (d ≥ 0 ⇒ u = x + tol1) ∧ (d < 0 ⇒ u = x - tol1)
      ) ∧
      

      fu = computeObjectiveValue(u) ∧
      (¬isMinim ⇒ fu = -fu) ∧
      previous = current ∧
      current = new UnivariatePointValuePair(u, isMinim ? fu : -fu) ∧
      best = best(best, best(current, previous, isMinim), isMinim) ∧
      

      (checker ≠ null ∧ checker.converged(iter, previous, current) ⇒ 
          return best
      ) ∧
      

      (fu ≤ fx ⇒ 
          (u < x ⇒ b = x) ∧ (u ≥ x ⇒ a = x) ∧
          v = w ∧ fv = fw ∧
          w = x ∧ fw = fx ∧
          x = u ∧ fx = fu
      ) ∨ (fu > fx ⇒ 
          (u < x ⇒ a = u) ∧ (u ≥ x ⇒ b = u) ∧
          (fu ≤ fw ∨ w ≈ x ⇒ 
              v = w ∧ fv = fw ∧
              w = u ∧ fw = fu
          ) ∨ (¬(fu ≤ fw ∨ w ≈ x) ∧ (fu ≤ fv ∨ v ≈ x ∨ v ≈ w) ⇒ 
              v = u ∧ fv = fu
          )
      ) ∧
      iter = iter + 1
  result = best
Functional Scenario Form 
convergedByTolerance&&returnBest || 
convergedByChecker&&returnBest || 
minimumFound&&returnOptimum || 
maxIterationsExceeded&&throwException
end_process

process best(
  a: UnivariatePointValuePair,
  b: UnivariatePointValuePair,
  isMinim: bool
) result: UnivariatePointValuePair
post 
  (a = null ⇒ result = b) ∧
  (b = null ⇒ result = a) ∧
  (a ≠ null ∧ b ≠ null ∧ isMinim ⇒ 
      (a.getValue() ≤ b.getValue() ⇒ result = a) ∧
      (a.getValue() > b.getValue() ⇒ result = b)) ∧
  (a ≠ null ∧ b ≠ null ∧ ¬isMinim ⇒ 
      (a.getValue() ≥ b.getValue() ⇒ result = a) ∧
      (a.getValue() < b.getValue() ⇒ result = b))
Functional Scenario Form 
aNull&&returnsB || 
bNull&&returnsA || 
minimization&&lowerValueSelected || 
maximization&&higherValueSelected || 
equalValues&&firstSelected
end_process


end_module