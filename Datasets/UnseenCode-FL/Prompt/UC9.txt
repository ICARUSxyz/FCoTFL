You are an intelligent debugging assistant. You will assist the user in locating faults in a program using a step-by-step reasoning process.
You are given the source code of a function and its corresponding SOFL (Structured Object-oriented Formal Language) specification, which describes the intended behavior of the code. Treat the specification as a contract the implementation must fulfill. Additionally, you are given bug symptoms that describe observable effects (falling tests or exceptions) only, no location hints.
Step 1: Code and Specification Understanding
You should concisely summarize the main functionality of the code, and identify any part(s) of the SOFL specification that appear to be underrepresented, misaligned, or missing in the implementation.
Step 2: Bug Contextualization and Hypothesis Generation
Based on your previous understanding of the code and its specification, analyze how the bug may relate to the code’s logic. You should identify the logical conditions, variables, or control branches that may be involved in causing the bug.
Step 3: Suspicious Line Ranking
Based on your previous analysis, identify and rank all the top-k most suspicious lines of code likely to contain the bug.
For each suspicious line, provide:
• The line number
• A suspiciousness score between 0 (not suspicious) and 1 (highly suspicious)
• A brief justification explaining your suspicion, based on:
  o Logical inconsistency
  o Misalignment with the SOFL specification
  o Likely control or data flow issues
Format your response using the following table:
| Line Number | Suspiciousness Score | Explanation |
|-------------|----------------------|-------------|
|             |                      |             |
Step 4: Explanation Report
Generate a structured explanation report to help developers understand the fault localization process and take further actions.
Your report should contain the following sections:
• Bug Overview: A brief summary of the bug and its observable symptoms.
• Analytical Reasoning: The reasoning chain that connects the specification, code, and bug symptoms to specific code locations.

Code:[
1: #include "templateselector.h"
2: #include "templateeditor.h"  // or the correct path to TemplateEditor's header file
3: 
4: 
5: TemplateSelector::TemplateSelector(QWidget *parent)
6:     : QDialog(parent)
7: {
8:     setWindowTitle("Select Comment Template");
9:     resize(600, 400); // Default size
10: 
11:     // Scrollable area
12:     QScrollArea *scrollArea = new QScrollArea(this);
13:     scrollArea->setWidgetResizable(false);
14: 
15:     // Main layout
16:     QWidget *scrollWidget = new QWidget(scrollArea);
17:     mainLayout = new QVBoxLayout();
18: 
19:     // Add example templates
20:     addTemplateBlock("Class Comment",
21:                      "/**\n"
22:                      " * @class ExampleClass\n"
23:                      " * @brief Description of the class\n"
24:                      " * @details Further details about the class functionality.\n"
25:                      " /// @author\n"
26:                      " /// @version\n"
27:                      " */");
28: 
29:     addTemplateBlock("Method Comment",
30:                      "/**\n"
31:                      " * @brief Brief description of the method\n"
32:                      " * @param param1 Description of param1\n"
33:                      " * @param param2 Description of param2\n"
34:                      " * @return Description of the return value\n"
35:                      " */");
36: 
37:     addTemplateBlock("Variable Comment",
38:                      "/**\n"
39:                      " * @var variableName\n"
40:                      " * @brief Description of the variable\n"
41:                      " */");
42: 
43:     addTemplateBlock("Function Comment",
44:                      "/**\n"
45:                      " * @fn <ReturnType> <FunctionName>(<ParameterList>)\n"
46:                      " * @brief <A brief description of the function's purpose>\n"
47:                      " *\n"
48:                      " * <A detailed description of the function, how it works, or any important implementation details.>\n"
49:                      " *\n"
50:                      " * @param <Parameter1> <Description of Parameter1>\n"
51:                      " * @param <Parameter2> <Description of Parameter2>\n"
52:                      " * @param <ParameterN> <Description of ParameterN>\n"
53:                      " *\n"
54:                      " * @return <Description of the return value>\n"
55:                      " * @retval <ReturnValue1> <Description of the meaning of ReturnValue1>\n"
56:                      " * @retval <ReturnValue2> <Description of the meaning of ReturnValue2>\n"
57:                      " *\n"
58:                      " * @pre <Description of the preconditions>\n"
59:                      " * @post <Description of the postconditions>\n"
60:                      " *\n"
61:                      " * @throws <ExceptionType> <Description of possible exceptions>\n"
62:                      " * @exception <ExceptionType> <Description of possible exceptions>\n"
63:                      " *\n"
64:                      " * @sa <Related functions or documentation links>\n"
65:                      " * @note <Special notes or remarks>\n"
66:                      " * @warning <Warning information>\n"
67:                      " * @deprecated <Deprecated function, suggested alternative>\n"
68:                      " *\n"
69:                      " * Example:\n"
70:                      " * 1. <Example1>\n"
71:                      " * 2. <Example2>\n"
72:                      " */");
73: 
74: 
75:     scrollWidget->setLayout(mainLayout);
76:     scrollArea->setWidget(scrollWidget);
77: 
78:     // Main dialog layout
79:     QVBoxLayout *dialogLayout = new QVBoxLayout(this);
80:     dialogLayout->addWidget(scrollArea);
81: 
82:     // OK button
83:     QPushButton *okButton = new QPushButton(this);
84:     connect(okButton, &QPushButton::clicked, this, &TemplateSelector::accept);
85:     dialogLayout->addWidget(okButton);
86: 
87:     setLayout(dialogLayout);
88: }]

SOFL:[
module UC9_templateselector

process UC9_templateselector(parent: QWidget) result: UC9_templateselector
pre
  true
post
  this.parent = parent
  setWindowTitle("Select Comment Template") executed
  resize(600, 400) executed

  scrollArea = new QScrollArea(this)
  scrollArea.widgetResizable = true

  scrollWidget = new QWidget(scrollArea)
  mainLayout = new QVBoxLayout(scrollWidget)

  addTemplateBlock("Class Comment", classCommentText) executed
  addTemplateBlock("Method Comment", methodCommentText) executed
  addTemplateBlock("Variable Comment", variableCommentText) executed
  addTemplateBlock("Function Comment", functionCommentText) executed

  scrollWidget.setLayout(mainLayout)
  scrollArea.setWidget(scrollWidget)

  dialogLayout = new QVBoxLayout(this)
  dialogLayout.addWidget(scrollArea)

  okButton = new QPushButton("OK", this)
  connect okButton.clicked to this.accept

  dialogLayout.addWidget(okButton)
  setLayout(dialogLayout) executed
Functional Scenario Form
parent is valid && template selector dialog created with scrollable comment blocks and OK button
end_process

end_module]

Bug symptoms: [
Bug Report TemplateSelector

Test Input

```cpp
TemplateSelector selector;
selector.exec();
```

Observed Behavior

 Scroll area content is cut off and not resizable.
 Template blocks do not display correctly.
 OK button appears without text, causing UI confusion.

Expected Behavior

 Scroll area should adjust dynamically to content.
 All templates should be visible in vertical layout.
 OK button should display text for user confirmation.

Actual Behavior

 `scrollArea-setWidgetResizable(false)` causes fixed layout.
 `mainLayout` lacks parent `scrollWidget`, breaking nesting.
 OK button renders without label due to missing constructor text.]
