You are an intelligent debugging assistant. You will assist the user in locating faults in a program using a step-by-step reasoning process.
You are given the source code of a function and its corresponding SOFL (Structured Object-oriented Formal Language) specification, which describes the intended behavior of the code. Treat the specification as a contract the implementation must fulfill. Additionally, you are given bug symptoms that describe observable effects (falling tests or exceptions) only, no location hints.
Step 1: Code and Specification Understanding
You should concisely summarize the main functionality of the code, and identify any part(s) of the SOFL specification that appear to be underrepresented, misaligned, or missing in the implementation.
Step 2: Bug Contextualization and Hypothesis Generation
Based on your previous understanding of the code and its specification, analyze how the bug may relate to the code’s logic. You should identify the logical conditions, variables, or control branches that may be involved in causing the bug.
Step 3: Suspicious Line Ranking
Based on your previous analysis, identify and rank all the top-k most suspicious lines of code likely to contain the bug.
For each suspicious line, provide:
• The line number
• A suspiciousness score between 0 (not suspicious) and 1 (highly suspicious)
• A brief justification explaining your suspicion, based on:
  o Logical inconsistency
  o Misalignment with the SOFL specification
  o Likely control or data flow issues
Format your response using the following table:
| Line Number | Suspiciousness Score | Explanation |
|-------------|----------------------|-------------|
|             |                      |             |
Step 4: Explanation Report
Generate a structured explanation report to help developers understand the fault localization process and take further actions.
Your report should contain the following sections:
• Bug Overview: A brief summary of the bug and its observable symptoms.
• Analytical Reasoning: The reasoning chain that connects the specification, code, and bug symptoms to specific code locations.

Code:[
1: package a;
2: 
3: import java.util.*;
4: 
5: class ColdStorage {
6:     private double maxTemp;
7:     private double minTemp;
8:     private double currentTemp;
9:     private List<String> tempLog;
10: 
11:     public ColdStorage(double maxTemp, double minTemp, double initialTemp) {
12:         this.maxTemp = maxTemp;
13:         this.minTemp = minTemp;
14:         this.currentTemp = initialTemp;
15:         this.tempLog = new ArrayList<>();
16:     }
17: 
18:     // 更新存储温度
19:     public void updateTemperature(double changeAmount) {
20:         currentTemp -= changeAmount;
21: 
22:         String message = String.format("Current Temperature: %.1f°C", currentTemp);
23:         if (currentTemp > maxTemp) {
24:             message += " | WARNING: Over-temperature Detected! Risk of Spoilage.";
25:         } else if (currentTemp < minTemp) {
26:             message += " | ALERT: Freezing Risk! Possible Product Damage.";
27:         }
28: 
29:         System.out.println(message);
30:         tempLog.add(message);
31:     }
32: 
33:     // 显示温度日志
34:     public void printTempLog() {
35:         System.out.println("Cold Storage Temperature Log:");
36:         for (String log : tempLog) {
37:             System.out.println(log);
38:         }
39:     }
40: }
41: 
42: public class c109_SmartBoiler {
43:     public static void main(String[] args) {
44:         ColdStorage storage = new ColdStorage(8.0, 2.0, 5); // 最大 8°C，最小 2°C，初始 5°C
45: 
46:         // 测试用例
47:         storage.updateTemperature(2.0);  // 增加至 7°C（正常）
48:         storage.updateTemperature(-4.0); // 降至 3°C（正常）
49:         storage.updateTemperature(-2.0); // 降至 1°C（低温警报）
50:         storage.updateTemperature(4.0);  // 增至 5°C（正常）
51:         storage.updateTemperature(5.0);  // 增至 10°C（超温警报）
52:         storage.printTempLog(); //  显示温度日志
53:     }
54: }]

SOFL:[
module UC54_SmartBoiler
type
  changeAmount: real
  currentTemp: real
  maxTemp: real
  minTemp: real

var
  currentTemp: real

process updateTemperature(changeAmount: real)
  result: Boolean
pre
  true
post
  currentTemp = currentTemp@entry + changeAmount ∧
  (
    (currentTemp > maxTemp) →
      result = true
  ) ∨
  (
    (currentTemp < minTemp) →
      result = true
  ) ∨
  (
    (minTemp ≤ currentTemp ∧ currentTemp ≤ maxTemp) →
      result = true
  )
Functional Scenario Form
   (currentTemperature < minTemperature) && heatingActive = true, output "ALERT: Water temperature too low (" + currentTemperature + "°C). Heating system activated.", Heating system activated.
        OR
        (currentTemperature > maxTemperature) && heatingActive = false, output "ALERT: Water temperature too high (" + currentTemperature + "°C). Heating system deactivated.", Heating system deactivated.
        OR
        (currentTemperature ≥ minTemperature ∧ currentTemperature ≤ maxTemperature) && output "Temperature optimal (" + currentTemperature + "°C). No action needed.", No control action required.
end_process

end_module]

Bug symptoms: [
// Test Case 1: updateTemperature(2.0)
→ Output:
Current Temperature: 3.0°C | ALERT: Freezing Risk! Possible Product Damage.  
// Expected a normal range, but outputs low temperature warning due to reversed update logic.

// Test Case 2: updateTemperature(-4.0)
→ Output:
Current Temperature: 7.0°C  
// Should have decreased, but temperature increases unexpectedly.

// Test Case 3: updateTemperature(-2.0)
→ Output:
Current Temperature: 9.0°C | WARNING: Over-temperature Detected! Risk of Spoilage.  
// Unintended over-temperature due to cumulative miscalculation.

// Test Case 4: updateTemperature(4.0)
→ Output:
Current Temperature: 5.0°C  
// Appears normal, but actual temperature path is inconsistent.

// Test Case 5: updateTemperature(5.0)
→ Output:
Current Temperature: 0.0°C | ALERT: Freezing Risk! Possible Product Damage.  
// Sudden drop to freezing, potentially unexpected.

// Observation 1:
Temperature updates behave oppositely to intended direction, leading to incorrect log entries.

// Observation 2:
Temperature log header is not separated by a blank line, affecting readability.

// Observation 3:
Initial temperature uses an integer instead of a floating-point literal, potentially inconsistent with expected type formatting.]
