You are an intelligent debugging assistant. You will assist the user in locating faults in a program using a step-by-step reasoning process.
You are given the source code of a function and its corresponding SOFL (Structured Object-oriented Formal Language) specification, which describes the intended behavior of the code. Treat the specification as a contract the implementation must fulfill. Additionally, you are given bug symptoms that describe observable effects (falling tests or exceptions) only, no location hints.
Step 1: Code and Specification Understanding
You should concisely summarize the main functionality of the code, and identify any part(s) of the SOFL specification that appear to be underrepresented, misaligned, or missing in the implementation.
Step 2: Bug Contextualization and Hypothesis Generation
Based on your previous understanding of the code and its specification, analyze how the bug may relate to the code’s logic. You should identify the logical conditions, variables, or control branches that may be involved in causing the bug.
Step 3: Suspicious Line Ranking
Based on your previous analysis, identify and rank all the top-k most suspicious lines of code likely to contain the bug.
For each suspicious line, provide:
• The line number
• A suspiciousness score between 0 (not suspicious) and 1 (highly suspicious)
• A brief justification explaining your suspicion, based on:
  o Logical inconsistency
  o Misalignment with the SOFL specification
  o Likely control or data flow issues
Format your response using the following table:
| Line Number | Suspiciousness Score | Explanation |
|-------------|----------------------|-------------|
|             |                      |             |
Step 4: Explanation Report
Generate a structured explanation report to help developers understand the fault localization process and take further actions.
Your report should contain the following sections:
• Bug Overview: A brief summary of the bug and its observable symptoms.
• Analytical Reasoning: The reasoning chain that connects the specification, code, and bug symptoms to specific code locations.

Code:[
1: package a;
2: 
3: import com.code_intelligence.jazzer.api.FuzzedDataProvider;
4: 
5: class t05 {
6:     public static void fuzzerTestOneInput(FuzzedDataProvider data) {
7:         // generate 1 random double value
8:         double a = data.consumeDouble();
9: 
10:         // call target method
11:         c05_TemperatureController controller = new c05_TemperatureController(20.0); 
12:         controller.setTemperature();   
13: 
14:         System.out.println("Testing with: a=" + a);
15:     }
16: 
17: }
18: 
19: public class c05_TemperatureController {
20: 	 	private double temperature;  
21: 	    private final double MIN_TEMP = 16.0; 
22: 	    private final double MAX_TEMP = 23.0;  
23: 
24: 	    public c05_TemperatureController(double initialTemp) {
25: 	        this.temperature = initialTemp;
26: 	    }
27: 
28: 	    public void setTemperature(double newTemp) {
29: 	        this.temperature = newTemp;
30: 	        if (newTemp < MIN_TEMP) {
31: 	            System.out.println("Warning: Temperature too low! Activating heating system...");
32: 	        } else if (newTemp >= MAX_TEMP) {
33: 	            System.out.println("Warning: Temperature too high! Activating cooling system...");
34: 	        } else {
35: 	            System.out.println("Temperature is stable. No action required.");
36: 	        }
37: 	    }
38: 
39: 	    public double getTemperature() {
40: 	        return initialTemp;
41: 	    }
42: 
43: 	    public static void main(String[] args) {
44: 	    	// testcase-VT:
45: 	    	c05_TemperatureController controller1 = new c05_TemperatureController(20.0); 
46: 	        controller1.setTemperature(18.3);   //newTemp >= 16 && newTemp <= 23
47: 	        c05_TemperatureController controller2 = new c05_TemperatureController(20.0); 
48: 	        controller2.setTemperature(37.433);   //newTemp > 23
49: 	        c05_TemperatureController controller3 = new c05_TemperatureController(20.0); 
50: 	        controller3.setTemperature(10);   //newTemp < 16
51: 	        
52: 	    	// testcase-FT:
53: //	    	c05_TemperatureController controller1 = new c05_TemperatureController(20.0); 
54: //	        controller1.setTemperature(-1.7976931348623157E308);   
55: //	    	c05_TemperatureController controller2 = new c05_TemperatureController(20.0); 
56: //	        controller2.setTemperature(1.1209145429141497E308);   
57: //	    	c05_TemperatureController controller3 = new c05_TemperatureController(20.0); 
58: //	        controller3.setTemperature(0);   
59: 	        
60: 	        
61: 	    }
62: }]

SOFL:[
module UC48_TemperatureController
type
  temperature: real
  newTemp: real
  message: string

var
  MIN_TEMP: real = 16.0
  MAX_TEMP: real = 23.0

process setTemperature(newTemp: real) message: string
pre
  true
post
  temperature = newTemp ∧
  ((newTemp < MIN_TEMP) → message = "Warning: Temperature too low! Activating heating system...") ∧
  ((newTemp > MAX_TEMP) → message = "Warning: Temperature too high! Activating cooling system...") ∧
  ((MIN_TEMP ≤ newTemp ≤ MAX_TEMP) → message = "Temperature is stable. No action required.")
Functional Scenario Form
(newTemp < 16) && Warning: Temperature too low! Activating heating system... 
OR 
(newTemp > 23) && Warning: Temperature too high! Activating cooling system... 
OR 
(newTemp >= 16 && newTemp <= 23) && Temperature is stable. No action required.	
end_process

end_module]

Bug symptoms: [
**Bug Report: Temperature Controller – Symptom Summary**

---

### **Test Case 1: Fuzzing Invocation Skips Temperature Input**

**Input:**

```java
double a = 19.5
```

**Expected Behavior:**
Fuzzed value used to update temperature setting.

**Observed Output:**

```
Temperature is stable. No action required.
```

**Note:**
Output message does not reflect the fuzzed input `a`, indicating it was not used.

---

### **Test Case 2: Incorrect Upper Bound Handling**

**Input:**

```java
controller.setTemperature(23.0)
```

**Expected Output:**

```
Temperature is stable. No action required.
```

**Observed Output:**

```
Warning: Temperature too high! Activating cooling system...
```

---

### **Test Case 3: Getter Returns Uninitialized Variable**

**Call:**

```java
getTemperature()
```

**Expected Output:**
Returns last set temperature.

**Observed Output:**
Compilation error or unexpected value due to unknown reference to `initialTemp`.

---

### **Test Case 4: Inconsistent Edge Case for Zero**

**Input:**

```java
controller.setTemperature(0.0)
```

**Expected Output:**

```
Warning: Temperature too low! Activating heating system...
```

**Observed Output:**
Behavior not tested or inconsistent; earlier test case with 0 replaced by 10.]
