You are an intelligent debugging assistant. You will assist the user in locating faults in a program using a step-by-step reasoning process.
You are given the source code of a function and its corresponding SOFL (Structured Object-oriented Formal Language) specification, which describes the intended behavior of the code. Treat the specification as a contract the implementation must fulfill. Additionally, you are given bug symptoms that describe observable effects (falling tests or exceptions) only, no location hints.
Step 1: Code and Specification Understanding
You should concisely summarize the main functionality of the code, and identify any part(s) of the SOFL specification that appear to be underrepresented, misaligned, or missing in the implementation.
Step 2: Bug Contextualization and Hypothesis Generation
Based on your previous understanding of the code and its specification, analyze how the bug may relate to the code’s logic. You should identify the logical conditions, variables, or control branches that may be involved in causing the bug.
Step 3: Suspicious Line Ranking
Based on your previous analysis, identify and rank all the top-k most suspicious lines of code likely to contain the bug.
For each suspicious line, provide:
• The line number
• A suspiciousness score between 0 (not suspicious) and 1 (highly suspicious)
• A brief justification explaining your suspicion, based on:
  o Logical inconsistency
  o Misalignment with the SOFL specification
  o Likely control or data flow issues
Format your response using the following table:
| Line Number | Suspiciousness Score | Explanation |
|-------------|----------------------|-------------|
|             |                      |             |
Step 4: Explanation Report
Generate a structured explanation report to help developers understand the fault localization process and take further actions.
Your report should contain the following sections:
• Bug Overview: A brief summary of the bug and its observable symptoms.
• Analytical Reasoning: The reasoning chain that connects the specification, code, and bug symptoms to specific code locations.

Code:[
1: #include <string>
2: #include <fstream>
3: 
4: void CameraController::setPoliceInfo(int id, std::string name, std::string department){
5: PolicemanInfo info(id, name, department);
6:     this->policemanInfo = info;
7: }
8: 
9: 
10: void CameraController::configureVideoSettings() {
11:     videoConfig.setFrameRate(30fps);                 // 30 fps
12:     videoConfig.setResolution("1920x1080");       // Full HD
13:     videoConfig.setEncodingStandard("H264");      // H.264 encoding
14:     videoConfig.setBitrate(2500);                 // 2500 kbps
15: }
16: 
17: 
18: void CameraController::startRecording() {
19:     configureVideoSettings();
20: 
21:     videoRecorder = std::make_unique<VideoRecorder>(timeManager, gpsModule, videoConfig);
22: 
23:     if (videoRecorder) {
24:         std::cout << "Starting video recording..." << std::endl;
25:         videoRecorder->startRecording();
26:         std::cout << "Recording started successfully." << std::endl;
27:     } else {
28:         std::cout << "Error: VideoRecorder instance could not be created." << std::endl;
29:     }
30: }
31: 
32: void CameraController::stopRecording() {
33:     if (videoRecorder && videoRecorder->getCurrentVideoFilePath().empty() == false) {
34:         std::cout << "Stopping video recording..." << std::endl;
35:         videoRecorder->stopRecording();
36:         std::cout << "Recording stopped. File saved: " << videoRecorder->getCurrentVideoFilePath() << std::endl;
37:     } else {
38:         std::cerr << "Error: No active recording to stop." << std::endl;
39:     }
40: }
41: 
42: void CameraController::encryptAndStoreVideo(const std::string& filePath, std::string& videoData){
43:     std::string encryptedData = this->encryptionModule.encrypt(videoData);
44: 
45:     std::string encryptedFilePath = this->storageManager.generateEncryptedFileName(filePath);
46: 
47:     this->storageManager.write(videoData);
48: 
49: }]

SOFL:[
module UC29_demoCode
type
  id: int
  name, department: string
  filePath, videoData, encryptedData, encryptedFilePath: string

process setPoliceInfo(id: int, name: string, department: string) result: Boolean
pre
  true
post
  policemanInfo = PolicemanInfo(id, name, department) ∧ result = true
Functional Scenario Form
(true) && (policemanInfo is updated with new id, name, and department)
end_process

process configureVideoSettings() result: Boolean
pre
  true
post
  videoConfig.frameRate = 30 ∧
  videoConfig.resolution = "1920x1080" ∧
  videoConfig.encodingStandard = "H264" ∧
  videoConfig.bitrate = 2500 ∧
  result = true
Functional Scenario Form
(true) && (videoConfig is set to predefined full HD settings)
end_process

process startRecording() result: Boolean
pre
  true
post
  videoRecorder ≠ null ∧
  videoRecorder.config = videoConfig ∧
  videoRecorder.started = true ⇒ result = true ∨
  videoRecorder = null ⇒ result = false
Functional Scenario Form
(videoRecorder created successfully) && (startRecording executed) or
(videoRecorder creation failed) && (return false)
end_process

process stopRecording() result: Boolean
pre
  videoRecorder ≠ null
post
  if videoRecorder.getCurrentVideoFilePath() ≠ "" then
    videoRecorder.started = false ∧ result = true
  else
    result = false
Functional Scenario Form
(videoRecorder is running and has valid file path) && (recording is stopped) or
(videoRecorder is null or no file path) && (return false)
end_process

process encryptAndStoreVideo(filePath: string, videoData: string) result: Boolean
pre
  filePath ≠ "" ∧ videoData ≠ ""
post
  encryptedData = encryptionModule.encrypt(videoData) ∧
  encryptedFilePath = storageManager.generateEncryptedFileName(filePath) ∧
  storageManager.write(encryptedData) ∧
  result = true
Functional Scenario Form
(valid file path and data) && (data encrypted and stored) or
(filePath = "" ∨ videoData = "") && (skip or fail to encrypt)
end_process

end_module]

Bug symptoms: [
**Bug Report: Video Recording and Storage Anomalies**

---

**Test Case 1: Configure Video Settings**

**Action:**
Invoke `configureVideoSettings()` before starting recording.

**Expected:**
Video configuration is applied with valid parameters (e.g., integer frame rate).

**Observed:**
Compilation fails or runtime exception due to invalid frame rate syntax.

**Log:**

```plaintext
[ERROR] Invalid argument '30fps' passed to setFrameRate()
[FAIL] Video settings not applied
```

---

**Test Case 2: Recorder Initialization Failure**

**Action:**
Trigger `startRecording()` without resolving dependencies.

**Expected:**
Recorder fails gracefully with clear error output to standard error.

**Observed:**
Error message printed to standard output instead of standard error.

**Log:**

```plaintext
[INFO] Starting video recording...
[ERROR] VideoRecorder instance could not be created.  // Printed to stdout
```

---

**Test Case 3: Recording Completion Message**

**Action:**
Call `stopRecording()` after a successful recording session.

**Expected:**
Message confirms recording stopped and file path is shown.

**Observed:**
Output message format inconsistent with user expectation.

**Log:**

```plaintext
[INFO] Recording stopped. File saved: /videos/output_20250808.enc
```

---

**Test Case 4: Encrypted Storage Operation**

**Action:**
Call `encryptAndStoreVideo()` with video data.

**Expected:**
Encrypted data is written to secure storage path.

**Observed:**
Plain video data is written instead of encrypted content.

**Log:**

```plaintext
[INFO] Encrypting video data...
[INFO] Writing file: /encrypted/output_20250808.enc
[WARN] Written content is not encrypted
```]
