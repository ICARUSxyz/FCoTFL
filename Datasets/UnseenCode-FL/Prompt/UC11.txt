You are an intelligent debugging assistant. You will assist the user in locating faults in a program using a step-by-step reasoning process.
You are given the source code of a function and its corresponding SOFL (Structured Object-oriented Formal Language) specification, which describes the intended behavior of the code. Treat the specification as a contract the implementation must fulfill. Additionally, you are given bug symptoms that describe observable effects (falling tests or exceptions) only, no location hints.
Step 1: Code and Specification Understanding
You should concisely summarize the main functionality of the code, and identify any part(s) of the SOFL specification that appear to be underrepresented, misaligned, or missing in the implementation.
Step 2: Bug Contextualization and Hypothesis Generation
Based on your previous understanding of the code and its specification, analyze how the bug may relate to the code’s logic. You should identify the logical conditions, variables, or control branches that may be involved in causing the bug.
Step 3: Suspicious Line Ranking
Based on your previous analysis, identify and rank all the top-k most suspicious lines of code likely to contain the bug.
For each suspicious line, provide:
• The line number
• A suspiciousness score between 0 (not suspicious) and 1 (highly suspicious)
• A brief justification explaining your suspicion, based on:
  o Logical inconsistency
  o Misalignment with the SOFL specification
  o Likely control or data flow issues
Format your response using the following table:
| Line Number | Suspiciousness Score | Explanation |
|-------------|----------------------|-------------|
|             |                      |             |
Step 4: Explanation Report
Generate a structured explanation report to help developers understand the fault localization process and take further actions.
Your report should contain the following sections:
• Bug Overview: A brief summary of the bug and its observable symptoms.
• Analytical Reasoning: The reasoning chain that connects the specification, code, and bug symptoms to specific code locations.

Code:[
1: #include "allruledescriptdialog.h"
2: #include "ui_allruledescriptdialog.h"
3: #include "ruledescriptdialog.h"
4: #include "screenfactor.h"
5: 
6: AllRuleDescriptDialog::AllRuleDescriptDialog(QWidget *parent) :
7:     QDialog(parent),
8:     ui(new Ui:AllRuleDescriptDialog)
9: {
10:     ui->setupUi(this);
11: 
12:     connect(ui->tableWidget, SIGNAL(itemDoubleClicked(QTableWidgetItem*)), this, SLOT(showRuleDescript(QTableWidgetItem*)));
13: 
14:     connect(ui->treeWidget, SIGNAL(itemDoubleClicked(QTreeWidgetItem*,int)), this, SLOT(showRuleDescript(QTreeWidgetItem*)));
15: }
16: 
17: AllRuleDescriptDialog::~AllRuleDescriptDialog()
18: {
19:     delete ui;
20: }
21: 
22: 
23: void AllRuleDescriptDialog::showRuleDescript(QTreeWidgetItem*, int)  
24: {
25:     RuleDescriptDialog *ruleDescript = new RuleDescriptDialog(this);
26:     ScreenFactor factor;
27:     ruleDescript->resize(factor.getScreenFactor() * ruleDescript->width(), factor.getScreenFactor() * ruleDescript->height());
28:     ruleDescript->show();
29: }
30: 
31: void AllRuleDescriptDialog::showRuleDescript(QTableWidgetItem*)
32: {
33:     RuleDescriptDialog *ruleDescript = new RuleDescriptDialog(this);
34:     ScreenFactor factor;
35:     ruleDescript->resize(factor.getScreenFactor() * ruleDescript->width(), factor.getScreenFactor() * ruleDescript->width());
36:     ruleDescript->show();
37: }
38:]

SOFL:[
module UC11_allruledescriptdialog
type
  column: int

process UC11_allruledescriptdialog(parent: QWidget) result: UC11_allruledescriptdialog
pre
  true
post
  this.parent = parent
  ui = new Ui::AllRuleDescriptDialog
  ui.setupUi(this) executed
  connect(ui.tableWidget.itemDoubleClicked, this.showRuleDescript(QTableWidgetItem*)) established
  connect(ui.treeWidget.itemDoubleClicked, this.showRuleDescript(QTreeWidgetItem*, int)) established
Functional Scenario Form
valid parent && dialog initialized with connected double-click slots for both table and tree widgets
end_process

process ~AllRuleDescriptDialog() result: Void
pre
  true
post
  delete ui executed
Functional Scenario Form
destructor invoked && ui deleted
end_process

process showRuleDescript(item: QTreeWidgetItem, column: int) result: Void
pre
  item ≠ null
post
  ruleDescript = new RuleDescriptDialog(this)
  factor = new ScreenFactor()
  ruleDescript.resize(factor.getScreenFactor() * ruleDescript.width(), factor.getScreenFactor() * ruleDescript.height()) executed
  ruleDescript.show() executed
Functional Scenario Form
tree item double-clicked && ruleDescript dialog resized and shown
end_process

process showRuleDescript(tableItem: QTableWidgetItem) result: Void
pre
  tableItem ≠ null
post
  ruleDescript = new RuleDescriptDialog(this)
  factor = new ScreenFactor()
  ruleDescript.resize(factor.getScreenFactor() * ruleDescript.width(), factor.getScreenFactor() * ruleDescript.height()) executed
  ruleDescript.show() executed
Functional Scenario Form
table item double-clicked && ruleDescript dialog resized and shown
end_process

end_module]

Bug symptoms: [
Bug Report: AllRuleDescriptDialog

Test Input:

```cpp
AllRuleDescriptDialog dialog;
dialog.show();
```

Observed Behavior:

* Application fails to compile.
* Dialog does not display on execution due to unresolved slots or sizing errors.

Expected Behavior:

* Double-clicking on tree or table items opens a resizable `RuleDescriptDialog`.
* Dialog resizes correctly using screen factor scaling.
* Application compiles and runs without syntax errors.

Actual Behavior:

* Compilation error at line 8 due to incorrect syntax: `Ui:AllRuleDescriptDialog` instead of `Ui::AllRuleDescriptDialog`.
* Slot `showRuleDescript(QTreeWidgetItem*)` not resolved due to missing `int` parameter in signal-slot connection.
* Resize behavior incorrect: width is used twice instead of width × height at line 35.]
